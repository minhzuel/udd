generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                String              @id @default(uuid())
  email             String              @unique
  password          String?
  country           String?
  timezone          String?
  name              String?
  roleId            String
  status            UserStatus          @default(INACTIVE)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  lastSignInAt      DateTime?
  emailVerifiedAt   DateTime?
  isTrashed         Boolean             @default(false)
  avatar            String?
  invitedByUserId   String?
  isProtected       Boolean             @default(false)
  ecommerceCategory EcommerceCategory[]
  ecommerceProduct  EcommerceProduct[]
  orders            Order[]
  systemLog         SystemLog[]
  role              UserRole            @relation(fields: [roleId], references: [id])
  addresses         UserAddress[]

  @@index([invitedByUserId])
  @@index([roleId])
  @@index([status])
}

model UserRole {
  id              String               @id @default(uuid())
  slug            String               @unique
  name            String               @unique
  description     String?
  isTrashed       Boolean              @default(false)
  createdByUserId String?
  createdAt       DateTime             @default(now())
  isProtected     Boolean              @default(false)
  isDefault       Boolean              @default(false)
  users           User[]
  permissions     UserRolePermission[]
}

model UserPermission {
  id              String               @id @default(uuid())
  slug            String               @unique
  name            String
  description     String?
  createdByUserId String?
  createdAt       DateTime             @default(now())
  roles           UserRolePermission[]
}

model UserRolePermission {
  id           String         @id @default(uuid())
  roleId       String
  permissionId String
  assignedAt   DateTime       @default(now())
  permission   UserPermission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  role         UserRole       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
}

model UserAddress {
  id           String  @id @default(uuid())
  userId       String
  addressLine  String
  addressLine2 String
  city         String
  state        String
  postalCode   String
  country      String
  isDefault    Boolean @default(false)
  user         User    @relation(fields: [userId], references: [id])

  @@index([userId])
}

model SystemLog {
  id          String   @id @default(uuid())
  userId      String
  createdAt   DateTime @default(now())
  entityId    String?
  entityType  String?
  event       String?
  description String?
  ipAddress   String?
  meta        String?
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model SystemSetting {
  id                             String   @id @default(uuid())
  name                           String   @default("My Company")
  logo                           String?
  active                         Boolean  @default(true)
  address                        String?
  websiteURL                     String?
  supportEmail                   String?
  supportPhone                   String?
  language                       String   @default("en")
  timezone                       String   @default("UTC")
  currency                       String   @default("USD")
  currencyFormat                 String   @default("$ {value}")
  socialFacebook                 String?
  socialTwitter                  String?
  socialInstagram                String?
  socialLinkedIn                 String?
  socialPinterest                String?
  socialYoutube                  String?
  notifyStockEmail               Boolean  @default(true)
  notifyStockWeb                 Boolean  @default(true)
  notifyStockThreshold           Int      @default(10)
  notifyStockRoleIds             String[]
  notifyNewOrderEmail            Boolean  @default(true)
  notifyNewOrderWeb              Boolean  @default(true)
  notifyNewOrderRoleIds          String[]
  notifyOrderStatusUpdateEmail   Boolean  @default(true)
  notifyOrderStatusUpdateWeb     Boolean  @default(true)
  notifyOrderStatusUpdateRoleIds String[]
  notifyPaymentFailureEmail      Boolean  @default(true)
  notifyPaymentFailureWeb        Boolean  @default(true)
  notifyPaymentFailureRoleIds    String[]
  notifySystemErrorFailureEmail  Boolean  @default(true)
  notifySystemErrorWeb           Boolean  @default(true)
  notifySystemErrorRoleIds       String[]
}

model EcommerceProduct {
  id              String                  @id @default(uuid())
  name            String
  sku             String?                 @unique
  description     String?
  price           Float
  beforeDiscount  Float?
  isTrashed       Boolean                 @default(false)
  status          EcommerceProductStatus  @default(PUBLISHED)
  createdAt       DateTime                @default(now())
  createdByUserId String?
  stockValue      Int                     @default(0)
  categoryId      String?
  thumbnail       String?
  category        EcommerceCategory?      @relation(fields: [categoryId], references: [id])
  createdByUser   User?                   @relation(fields: [createdByUserId], references: [id])
  productImage    EcommerceProductImage[]
  orderItems      OrderItem[]

  @@index([categoryId])
  @@index([createdByUserId])
}

model EcommerceCategory {
  id               String                  @id @default(uuid())
  name             String
  description      String?
  slug             String                  @unique
  isTrashed        Boolean                 @default(false)
  status           EcommerceCategoryStatus @default(ACTIVE)
  parentId         String?
  image            String                  @default("/@placeholder.png")
  createdAt        DateTime                @default(now())
  createdByUserId  String?
  createdByUser    User?                   @relation(fields: [createdByUserId], references: [id])
  parent           EcommerceCategory?      @relation("CategoryToCategory", fields: [parentId], references: [id])
  children         EcommerceCategory[]     @relation("CategoryToCategory")
  ecommerceProduct EcommerceProduct[]

  @@index([createdByUserId])
}

model EcommerceProductImage {
  id        String           @id @default(uuid())
  productId String
  url       String
  product   EcommerceProduct @relation(fields: [productId], references: [id])

  @@index([productId])
}

model Order {
  id             String      @id @default(uuid())
  orderNumber    String      @unique
  userId         String?
  status         OrderStatus @default(PENDING)
  totalAmount    Float
  subtotal       Float
  tax            Float
  shippingCost   Float
  discountAmount Float       @default(0)
  couponId       String?
  fullName       String
  mobileNumber   String
  address        String
  paymentMethod  String
  shippingMethod String
  notes          String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  coupon         Coupon?     @relation(fields: [couponId], references: [id])
  user           User?       @relation(fields: [userId], references: [id])
  orderItems     OrderItem[]

  @@index([userId])
  @@index([status])
  @@index([couponId])
}

model OrderItem {
  id        String           @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  order     Order            @relation(fields: [orderId], references: [id])
  product   EcommerceProduct @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model Coupon {
  id          String     @id @default(uuid())
  code        String     @unique
  type        CouponType
  value       Float
  minPurchase Float?
  maxDiscount Float?
  startDate   DateTime
  endDate     DateTime?
  usageLimit  Int?
  usedCount   Int        @default(0)
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  orders      Order[]

  @@index([code])
  @@index([isActive])
}

enum UserStatus {
  INACTIVE
  ACTIVE
  BLOCKED
}

enum EcommerceProductStatus {
  PUBLISHED
  INACTIVE
}

enum EcommerceCategoryStatus {
  ACTIVE
  INACTIVE
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum CouponType {
  PERCENTAGE
  FIXED
}


